import numpy as np
import matplotlib.pyplot as plt

#Creacion de arreglo para r inicial y v inicial
r0=np.array([7000,-12124,0])
v0=np.array([2.6679, 4.6210,0])

#El vector momento ángular
hvec=np.cross(r0,v0) 
hvec
#La magnitud del momento ángular. 
hmag=np.sqrt(np.inner(hvec,hvec))
hmag
#Magnitud de vector de posicion
r0mag=np.sqrt(np.inner(r0,r0))
r0mag
#Vector unitario radial
r0unit=r0/r0mag
r0unit
#Velocidad Radial
vr0=np.inner(v0,r0unit)
vr0
#Definiendo la funcion de r en terminos de Dtheta
mu=398600
dtheta=100*np.pi/180

def r(h,mu,r0,dtheta,vr):
    return (h**2/mu)*(1+(h**2/(mu*r0)-1)*np.cos(dtheta)-h*vr*np.sin(dtheta)/mu)**(-1)

r=r(hmag, mu, r0mag,dtheta,vr0)
r
#Definiendo los coeficientes de Lagrange por medio de r y dtheta:
f=1-mu*r*(1-np.cos(dtheta))/hmag**2
g=r*r0mag*np.sin(dtheta)/hmag
fdot=(mu/hmag)*(1-np.cos(dtheta))*(mu*(1-np.cos(dtheta))/hmag**2-r0mag**(-1)-r**(-1))/np.sin(dtheta)
gdot=1-mu*r0mag*(1-np.cos(dtheta))/hmag**2
print('El valor de f es:', f)
print('El valor de g es:', g)
print('El valor de f dot es:', fdot )
print('El valor de g dot es:E', gdot)
#Los nuevos vectores de r y v:
rnew=f*r0+g*v0
vnew=fdot*r0+gdot*v0
#El nuevo vector de posicion es:
rnew
#El nuevo vector de velocidad es:
vnew
#Para graficar, se determinara una funcion de r que solo depende de theta, y luego se creara un arreglo
#de r con los valores determinados por un linspace de theta. Se definira f y g como arreglos que dependen de r y theta.
def r_a(theta): 
    return (hmag**2/mu)*(1+(hmag**2/(mu*r0mag)-1)*np.cos(theta)-hmag*vr0*np.sin(theta)/mu)**(-1)

theta=np.linspace(0,2*np.pi, 10000)
r_a=r_a(theta)
r_a
f_a=1-mu*r_a*(1-np.cos(theta))/hmag**2
g_a=r_a*r0mag*np.sin(theta)/hmag
f_a
g_a
#Reemplazando los valores de f y g:
r_x=f_a*r0[0]+g_a*v0[0]
r_x
r_y=f_a*r0[1]+g_a*v0[1]
r_y

rp_x=6929.9549*np.cos(31.6*np.pi/180)
rp_y=6929.9549*np.sin(31.6*np.pi/180)
h=np.cross(r0,v0)
print("h es igual a: ", h)


#Graficando:
figure, axes =plt.subplots()
circulo=plt.Circle((0,0), 6378, color="cyan")
axes.set_aspect(1)
axes.add_artist(circulo)
plt.scatter(rnew[0],rnew[1], color="blue", zorder=3)
plt.scatter(r0[0],r0[1], color="blue", zorder=3)
plt.scatter(rp_x,rp_y, color="orange", zorder=3)
plt.plot([0, rp_x], [0, rp_y], color="orange")
plt.plot([0, rnew[0]], [0, rnew[1]], color="blue")
plt.plot([0, r0[0]], [0, r0[1]], color="blue")
plt.plot(r_x,r_y, color="purple")
plt.xlim(-20000, 20000)
plt.ylim(-20000, 20000)
plt.title("Orbita")
plt.xlabel("x (km)")
plt.ylabel("y (km)")
plt.grid()
plt.show()
